En kubernetes hay varios conceptos basicos como son los nodos y los pods de los que hablaremos aqui.

Los nodos son computadoras o servidores que se unen a un cluster de nodos para repartirse las tareas de mantenimiento y ejecucion de kubernetes.

Recordemos que una de las mejores caracteristicas de kubernetes es su capacidad de dividir el trabajo y balancearlo entre varias terminales para soportar cargas de trabajo extensivas.

Dentro de los nodos podemos destacar uno especial, que es el nodo master..

Este nodo tendra una coleccion de servicios como:
    - Un servidor API, que nos permite conectarnos con el resto de nuestra aplicacion
    - Servicios principales como el scheduler y el controller manager
    - etcd que es la base de datos interna para toda la aplicacion

Esto lo hace un nodo principal para el funcionamiento de nuestra aplicacion.

Para ejecutar un nodo master luego de instalar correctamente kubernetes podemos correr:
    kubeadm init

Este comando va a mostrar un monton de actividad y en la ultima linea va a tirar algo como:
    kubeadm join --token SOMETOKEN SOMEIPADDRESS --discovery-token-ca-cert-hash SOMESHAHASH

Ahora tenemos un cluster corriendo en la red local y cualquier computadora de nuestra red puede conectarse con el script anterior que nos devolvio kubeadm init al cluster y dividirse tareas con el nodo master.

Vamos a saltearnos el paso de añadir otro nodo al cluster y vamos directamente al ultimo paso que es configurar el networking para nuestro cluster. Para eso corremos:
    kubectl apply -n kube-system -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"

Y asi configuramos el cluster para ahora seguir con la generacion de algunos pods.. Los pods, que aun no se han explicado, son una abstraccion de los containers que nos facilita el trabajo con kubernetes al manejar los containers y la comunicacion entre ellos internamente. 

Para empezar deberiamos introducir kubectl que es nuestra herramienta de comunicarnos con kubernetes a traves de la consola.

Podemos correr un comando de prueba para ver todos los pods corriendo en el nodo master ahora mismo con:
    kubectl -n kube-system get pods

La opcion -n es para especificar un namespace; en este caso el namespace que kubernetes usa para declarar sus pods internos.

Podemos ver entonces que nos muestra pods como etcd, kube-apiserver, kube-scheduler, etc. de los que ya hemos hablado.

Corriendo nuestro primer container con Kubernetes:

Podemos iniciar un pod muy sencillo con 'kubectl run' y especificarle una imagen tal como haciamos con docker. Asi, kubernetes va a descargar y utilizar configuraciones default para iniciar nuestra aplicacion corriendo un unico pod.

Vamos a correr:
    kubectl run pingpong --image alpine ping 8.8.8.8

Y entonces?.. 

Podemos ver que hemos creado unos cuantos servicios nuevos con esos comandos corriendo:
    kubectl get all

Ahi vamos a poder ver los siguientes servicios:
    - deploy/pingpong (un deployment que tomo el nombre que especificamos justo luego del run)
    - rs/pingpong (un replica set creado por el deployment)
    - po/pingpong (un pod creado por el replica set)

Ahora, hemos dado un paso adelante para poder ver la jerarquia existente dentro de kubernetes pero nos hemos adelantado tanto que tocamos conceptos desconocidos como deployment y los replica set.

El concepto de replica set es un concepto diseñado para la utilidad de escalabilidad y confiabilidad que nos ofrece kubernetes. La idea de los replica set es mantener un numero minimo y deseado de pods identicos corriendo para asegurarnos que:
    - En caso de que uno o mas pods fallen y desaparezcan, el controlador del replica set va a generar nuevas copias para remplazarlos.
    - En el caso de que querramos escalar la apicacion para recibir mas consultas podemos especificar un mayor numero de replicas o configurarlo para que aumente automaticamente.

El concepto de deployment es el ultimo en la jerarquia de kubernetes y actua orquestando los replica set y los pods con actualizaciones declarativas sobre estos.

Una actualizacion declarativa es algo como 'podria usted mantener 4 replica set ahora mismo'. De esta forma el deployment puede guiar el estado actual de nuestro proyecto hasta el estado deseado de una manera controlada.

Entonces al configurar nosotros nuestro deployment establecemos un estado deseado y el deployment va a hacer todo lo posible por satisfacer esto utilizando una combinacion de controladores.

Volviendo a lo que ibamos, ahora creamos un container dentro de un pod adentro de muchas otras cosas y esencialmente este container le hizo un ping a la direccion publica de google.

Ahora, todo esto no se entiende hasta que no lo vemos en accion, asi que para eso vamos a correr un nuevo comando:
    kubectl logs 

Este comando nos va a mostrar el historial de consola de un pod especifico de un pod si lo pasamos por su nombre; o como alternativa podemos especificar un servicio como los que nos habia impreso antes. Como ejemplo vamos a hacer para el deploy:
    kubectl logs deploy/pingpong

Vemos que el nombre tiene que ser el formato que uso al imprimirlo en el paso anterior. Ademas vemos que ahora nos imprimio todos los resultados del ping a google como normalmente.

Nuestro container esta funcionando!!!

Ahora vamos a comprobar el funcionamiento de nuestro replica set. Para eso vamos a eliminar el pod que esta corriendo actualmente y despues ver que automaticamente es reemplazado. Para eso corremos:
    kubectl get pods

Entonces vemos nuestro pod con su nombre y lo usamos en el siguiente comando:
    kubectl delete pod PODNAME

Eso va a eliminar nuestro pod. Mientras lo elimina podemos darle a ctrl + c para seguir usando la consola y correr nuevamente 'kubectl get pods' para asi ver que nuestro pod esta en esta el estado terminating o no esta, y en su lugar se ha creado un nuevo pod para reemplazarlo.

